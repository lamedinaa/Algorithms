python -m venv env
pip install django
python -m pip freeze


                                                            //////LISTAS////////
L.append(object)
L.count(value)                                              ### Devuelve el número de veces que se encontró value en la lista.
L.extend(iterable)                                          ### Añade los elementos del iterable a la lista.
L.index(value[, start[, stop]])                             ### Devuelve la posición en la que se encontró la primera ocurrencia de value. 
                                                            Si se especifican, start y stop definen las posiciones de inicio y fin de una sublista en la que buscar.
L.insert(index, object)                                     ### Inserta el objeto object en la posición index.
L.pop([index])                                              ### Devuelve el valor en la posición index y lo elimina de la lista. Si no se especifica la posición, 
                                                            se utiliza el último elemento de la lista.
L.remove(value)                                             ### Eliminar la primera ocurrencia de value en la lista.
L.reverse()                                                 ### Invierte la lista. Esta función trabaja sobre la propia lista desde la que se invoca el método, no sobre una copia.
L.sort(cmp=None, key=None, reverse=False)                   ### Ordena la lista. Si se especifica cmp, este debe ser una función que tome como parámetro dos valores x e y de la lista 
                                                            y devuelva -1 si x es menor que y, 0 si son iguales y 1 si x es mayor que y El parámetro reverse es un booleano que indica 
                                                            si se debe ordenar la lista de forma inversa, lo que sería equivalente a llamar primero a L.sort() y después a L.reverse().

                                                        ////////DICCIONARIOS////////
D.has_key(k)                                                # Comprueba si el diccionario tiene la clave k. Es equivalente a la sintaxis k in D.
D.items()                                                   # Devuelve una lista de tuplas con pares clave-valor.
D.keys()                                                    # Devuelve una lista de las claves del diccionario.
D.pop(k[, d])                                               # Borra la clave k del diccionario y devuelve su valor. Si no se encuentra dicha clave se devuelve d si se especificó el parámetro o bien se lanza
                                                            # una excepción.
D.values()                                                  # Devuelve una lista de los valores del diccionario.

                                                        ////////CADENAS////////
S.count(sub[, start[, end]])
    Devuelve el número de veces que se encuentra sub en la cadena. Los parámetros opcionales start y end definen una subcadena en la que buscar.
S.find(sub[, start[, end]])
    Devuelve la posición en la que se encontró por primera vez sub en la cadena o -1 si no se encontró.
S.join(sequence)
    Devuelve una cadena resultante de concatenar las cadenas de la secuencia seq separadas por la cadena sobre la que se llama el método.
S.partition(sep)
    Busca el separador sep en la cadena y devuelve una tupla con la subcadena hasta dicho separador, 
    el separador en si, y la subcadena del separador hasta el final de la cadena. Si no se encuentra el separador, 
    la tupla contendrá la cadena en si y dos cadenas vacías.
S.replace(old, new[, count])
    Devuelve una cadena en la que se han reemplazado todas las ocurrencias de la cadena old por la cadena new. 
    Si se especifica el parámetro count, este indica el número máximo de ocurrencias a reemplazar.
S.split([sep [,maxsplit]])
    Devuelve una lista conteniendo las subcadenas en las que se divide nuestra cadena al dividirlas por el delimitador sep. 
    En el caso de que no se especifique sep, se usan espacios. Si se especifica maxsplit, este indica el número máximo de particiones a realizar.


////////////////////////////////ITERACIONES SOBRE LISTAS
map(function, sequence[, sequence, ...])
filter(function, sequence)
reduce(function, sequence[, initial])




































